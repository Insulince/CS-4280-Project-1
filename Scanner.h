#ifndef P1_SCANNER_H
#define P1_SCANNER_H

#include <string>
#include <map>
#include "TokenIdentifier.h"
#include "Token.h"

class Scanner {
private:
    const std::string SUPPORTED_ALPHABET = EOF + " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789=<>!:+-*/&%.(){}[],;"; //# is omitted because they are filtered out of the original source.

    const static int QUANTITY_TOKENS = 27;

    const int FSA_TABLE_ROW_INDEX_END_OF_FILE = 0;
    const int FSA_TABLE_ROW_INDEX_IDENTIFIER = 1;
    const int FSA_TABLE_ROW_INDEX_INTEGER = 2;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_ASSIGN = 3;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN = 4;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN_OR_EQUAL_TO = 5;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN = 6;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 7;
    const int FSA_TABLE_ROW_INDEX_ILLEGAL_OPERATOR_NOT = 8;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_NOT_EQUAL_TO = 9;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_EQUAL_TO = 10;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_COLON = 11;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_ADDITION = 12;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_SUBTRACTION = 13;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_MULTIPLICATION = 14;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_DIVISION = 15;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_AND = 16;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_MODULO = 17;
    const int FSA_TABLE_ROW_INDEX_OPERATOR_CONCATENATION = 18;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_PARENTHESIS = 19;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_PARENTHESIS = 20;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_CURLY_BRACE = 21;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_CURLY_BRACE = 22;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_SQUARE_BRACKET = 23;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_SQUARE_BRACKET = 24;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_COMMA = 25;
    const int FSA_TABLE_ROW_INDEX_DELIMITER_SEMICOLON = 26;

    const std::map<TOKEN_IDENTIFIER, int> TOKEN_IDENTIFIER_TO_FSA_TABLE_ROW_INDEX_MAP = {
            {END_OF_FILE,                       FSA_TABLE_ROW_INDEX_END_OF_FILE},
            {IDENTIFIER,                        FSA_TABLE_ROW_INDEX_IDENTIFIER},
            {INTEGER,                           FSA_TABLE_ROW_INDEX_INTEGER},
            {OPERATOR_ASSIGNM,                  FSA_TABLE_ROW_INDEX_OPERATOR_ASSIGN},
            {OPERATOR_LESS_THAN,                FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN},
            {OPERATOR_LESS_THAN_OR_EQUAL_TO,    FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN_OR_EQUAL_TO},
            {OPERATOR_GREATER_THAN,             FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN},
            {OPERATOR_GREATER_THAN_OR_EQUAL_TO, FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN_OR_EQUAL_TO},
            {ILLEGAL_OPERATOR_NOT,              FSA_TABLE_ROW_INDEX_ILLEGAL_OPERATOR_NOT},
            {OPERATOR_NOT_EQUAL_TO,             FSA_TABLE_ROW_INDEX_OPERATOR_NOT_EQUAL_TO},
            {OPERATOR_EQUAL_TO,                 FSA_TABLE_ROW_INDEX_OPERATOR_EQUAL_TO},
            {OPERATOR_COLON,                    FSA_TABLE_ROW_INDEX_OPERATOR_COLON},
            {OPERATOR_ADDITION,                 FSA_TABLE_ROW_INDEX_OPERATOR_ADDITION},
            {OPERATOR_SUBTRACTION,              FSA_TABLE_ROW_INDEX_OPERATOR_SUBTRACTION},
            {OPERATOR_MULTIPLICATION,           FSA_TABLE_ROW_INDEX_OPERATOR_MULTIPLICATION},
            {OPERATOR_DIVISION,                 FSA_TABLE_ROW_INDEX_OPERATOR_DIVISION},
            {OPERATOR_AND,                      FSA_TABLE_ROW_INDEX_OPERATOR_AND},
            {OPERATOR_MODULO,                   FSA_TABLE_ROW_INDEX_OPERATOR_MODULO},
            {OPERATOR_CONCATENATION,            FSA_TABLE_ROW_INDEX_OPERATOR_CONCATENATION},
            {DELIMITER_LEFT_PARENTHESIS,        FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_PARENTHESIS},
            {DELIMITER_RIGHT_PARENTHESIS,       FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_PARENTHESIS},
            {DELIMITER_LEFT_CURLY_BRACE,        FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_CURLY_BRACE},
            {DELIMITER_RIGHT_CURLY_BRACE,       FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_CURLY_BRACE},
            {DELIMITER_LEFT_SQUARE_BRACKET,     FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_SQUARE_BRACKET},
            {DELIMITER_RIGHT_SQUARE_BRACKET,    FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_SQUARE_BRACKET},
            {DELIMITER_COMMA,                   FSA_TABLE_ROW_INDEX_DELIMITER_COMMA},
            {DELIMITER_SEMICOLON,               FSA_TABLE_ROW_INDEX_DELIMITER_SEMICOLON}
    };

    const static int QUANTITY_CHARACTER_CLASSES = 24;

    const int FSA_TABLE_COLUMN_INDEX_END_OF_FILE = 0;
    const int FSA_TABLE_COLUMN_INDEX_WHITE_SPACE = 1;
    const int FSA_TABLE_COLUMN_INDEX_LETTER = 2;
    const int FSA_TABLE_COLUMN_INDEX_DECIMAL = 3;
    const int FSA_TABLE_COLUMN_INDEX_EQUAL = 4;
    const int FSA_TABLE_COLUMN_INDEX_LESS_THAN = 5;
    const int FSA_TABLE_COLUMN_INDEX_GREATER_THAN = 6;
    const int FSA_TABLE_COLUMN_INDEX_EXCLAMATION_POINT = 7;
    const int FSA_TABLE_COLUMN_INDEX_COLON = 8;
    const int FSA_TABLE_COLUMN_INDEX_PLUS = 9;
    const int FSA_TABLE_COLUMN_INDEX_MINUS = 10;
    const int FSA_TABLE_COLUMN_INDEX_ASTERISK = 11;
    const int FSA_TABLE_COLUMN_INDEX_FORWARD_SLASH = 12;
    const int FSA_TABLE_COLUMN_INDEX_AMPERSAND = 13;
    const int FSA_TABLE_COLUMN_INDEX_PERCENT = 14;
    const int FSA_TABLE_COLUMN_INDEX_PERIOD = 15;
    const int FSA_TABLE_COLUMN_INDEX_LEFT_PARENTHESIS = 16;
    const int FSA_TABLE_COLUMN_INDEX_RIGHT_PARENTHESIS = 17;
    const int FSA_TABLE_COLUMN_INDEX_LEFT_CURLY_BRACE = 18;
    const int FSA_TABLE_COLUMN_INDEX_RIGHT_CURLY_BRACE = 19;
    const int FSA_TABLE_COLUMN_INDEX_LEFT_SQUARE_BRACKET = 20;
    const int FSA_TABLE_COLUMN_INDEX_RIGHT_SQUARE_BRACKET = 21;
    const int FSA_TABLE_COLUMN_INDEX_COMMA = 22;
    const int FSA_TABLE_COLUMN_INDEX_SEMICOLON = 23;

    const std::map<char, int> CHARACTER_TO_FSA_TABLE_COLUMN_INDEX_MAP = {
            {EOF, FSA_TABLE_COLUMN_INDEX_END_OF_FILE},
            {' ', FSA_TABLE_COLUMN_INDEX_WHITE_SPACE},
            {'a', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'b', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'c', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'d', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'e', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'f', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'g', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'h', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'i', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'j', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'k', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'l', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'m', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'n', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'o', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'p', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'q', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'r', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'s', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'t', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'u', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'v', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'w', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'x', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'y', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'z', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'A', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'B', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'C', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'D', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'E', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'F', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'G', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'H', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'I', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'J', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'K', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'L', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'M', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'N', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'O', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'P', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'Q', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'R', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'S', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'T', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'U', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'V', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'W', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'X', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'Y', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'Z', FSA_TABLE_COLUMN_INDEX_LETTER},
            {'0', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'1', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'2', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'3', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'4', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'5', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'6', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'7', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'8', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'9', FSA_TABLE_COLUMN_INDEX_DECIMAL},
            {'=', FSA_TABLE_COLUMN_INDEX_EQUAL},
            {'<', FSA_TABLE_COLUMN_INDEX_LESS_THAN},
            {'>', FSA_TABLE_COLUMN_INDEX_GREATER_THAN},
            {'!', FSA_TABLE_COLUMN_INDEX_EXCLAMATION_POINT},
            {':', FSA_TABLE_COLUMN_INDEX_COLON},
            {'+', FSA_TABLE_COLUMN_INDEX_PLUS},
            {'-', FSA_TABLE_COLUMN_INDEX_MINUS},
            {'*', FSA_TABLE_COLUMN_INDEX_ASTERISK},
            {'/', FSA_TABLE_COLUMN_INDEX_FORWARD_SLASH},
            {'&', FSA_TABLE_COLUMN_INDEX_AMPERSAND},
            {'%', FSA_TABLE_COLUMN_INDEX_PERCENT},
            {'.', FSA_TABLE_COLUMN_INDEX_PERIOD},
            {'(', FSA_TABLE_COLUMN_INDEX_LEFT_PARENTHESIS},
            {')', FSA_TABLE_COLUMN_INDEX_RIGHT_PARENTHESIS},
            {'{', FSA_TABLE_COLUMN_INDEX_LEFT_CURLY_BRACE},
            {'}', FSA_TABLE_COLUMN_INDEX_RIGHT_CURLY_BRACE},
            {'[', FSA_TABLE_COLUMN_INDEX_LEFT_SQUARE_BRACKET},
            {']', FSA_TABLE_COLUMN_INDEX_RIGHT_SQUARE_BRACKET},
            {',', FSA_TABLE_COLUMN_INDEX_COMMA},
            {';', FSA_TABLE_COLUMN_INDEX_SEMICOLON}
    };

    const int FINAL_STATE_END_OF_FILE = 1000;
    const int FINAL_STATE_IDENTIFIER = 1001;
    const int FINAL_STATE_INTEGER = 1002;
    const int FINAL_STATE_OPERATOR_ASSIGN = 1003;
    const int FINAL_STATE_OPERATOR_LESS_THAN = 1004;
    const int FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO = 1005;
    const int FINAL_STATE_OPERATOR_GREATER_THAN = 1006;
    const int FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 1007;
    const int FINAL_STATE_OPERATOR_NOT_EQUAL_TO = 1009;
    const int FINAL_STATE_OPERATOR_EQUAL_TO = 1010;
    const int FINAL_STATE_OPERATOR_COLON = 1011;
    const int FINAL_STATE_OPERATOR_ADDITION = 1012;
    const int FINAL_STATE_OPERATOR_SUBTRACTION = 1013;
    const int FINAL_STATE_OPERATOR_MULTIPLICATION = 1014;
    const int FINAL_STATE_OPERATOR_DIVISION = 1015;
    const int FINAL_STATE_OPERATOR_AND = 1016;
    const int FINAL_STATE_OPERATOR_MODULO = 1017;
    const int FINAL_STATE_OPERATOR_CONCATENATION = 1018;
    const int FINAL_STATE_DELIMITER_LEFT_PARENTHESIS = 1019;
    const int FINAL_STATE_DELIMITER_RIGHT_PARENTHESIS = 1020;
    const int FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE = 1021;
    const int FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE = 1022;
    const int FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET = 1023;
    const int FINAL_STATE_DELIMITER_RIGHT_SQUARE_BRACKET = 1024;
    const int FINAL_STATE_DELIMITER_COMMA = 1025;
    const int FINAL_STATE_DELIMITER_SEMICOLON = 1026;

    const int INTERMEDIATE_STATE_INITIAL = 0;
    const int INTERMEDIATE_STATE_IDENTIFIER = 1;
    const int INTERMEDIATE_STATE_INTEGER = 2;
    const int INTERMEDIATE_STATE_OPERATOR_ASSIGN = 3;
    const int INTERMEDIATE_STATE_OPERATOR_LESS_THAN = 4;
    const int INTERMEDIATE_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO = 5;
    const int INTERMEDIATE_STATE_OPERATOR_GREATER_THAN = 6;
    const int INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 7;
    const int INTERMEDIATE_STATE_ILLEGAL_OPERATOR_EXCLAMATION_POINT = 8;
    const int INTERMEDIATE_STATE_OPERATOR_NOT_EQUAL_TO = 9;
    const int INTERMEDIATE_STATE_OPERATOR_EQUAL_TO = 10;
    const int INTERMEDIATE_STATE_OPERATOR_COLON = 11;
    const int INTERMEDIATE_STATE_OPERATOR_ADDITION = 12;
    const int INTERMEDIATE_STATE_OPERATOR_SUBTRACTION = 13;
    const int INTERMEDIATE_STATE_OPERATOR_MULTIPLICATION = 14;
    const int INTERMEDIATE_STATE_OPERATOR_DIVISION = 15;
    const int INTERMEDIATE_STATE_OPERATOR_AND = 16;
    const int INTERMEDIATE_STATE_OPERATOR_MODULO = 17;
    const int INTERMEDIATE_STATE_OPERATOR_CONCATENATION = 18;
    const int INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS = 19;
    const int INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS = 20;
    const int INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE = 21;
    const int INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE = 22;
    const int INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET = 23;
    const int INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET = 24;
    const int INTERMEDIATE_STATE_DELIMITER_COMMA = 25;
    const int INTERMEDIATE_STATE_DELIMITER_SEMICOLON = 26;

    const int ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT = -1;

    const int FSA_TABLE[QUANTITY_TOKENS][QUANTITY_CHARACTER_CLASSES] = {
            {FINAL_STATE_END_OF_FILE,                        INTERMEDIATE_STATE_INITIAL,                     INTERMEDIATE_STATE_IDENTIFIER,                  INTERMEDIATE_STATE_INTEGER,                     INTERMEDIATE_STATE_OPERATOR_ASSIGN,                   INTERMEDIATE_STATE_OPERATOR_LESS_THAN,          INTERMEDIATE_STATE_OPERATOR_GREATER_THAN,       INTERMEDIATE_STATE_ILLEGAL_OPERATOR_EXCLAMATION_POINT, INTERMEDIATE_STATE_OPERATOR_COLON,              INTERMEDIATE_STATE_OPERATOR_ADDITION,           INTERMEDIATE_STATE_OPERATOR_SUBTRACTION,        INTERMEDIATE_STATE_OPERATOR_MULTIPLICATION,     INTERMEDIATE_STATE_OPERATOR_DIVISION,           INTERMEDIATE_STATE_OPERATOR_AND,                INTERMEDIATE_STATE_OPERATOR_MODULO,             INTERMEDIATE_STATE_OPERATOR_CONCATENATION,      INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS,  INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS, INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE,  INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE, INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET, INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET, INTERMEDIATE_STATE_DELIMITER_COMMA, INTERMEDIATE_STATE_DELIMITER_SEMICOLON},
            {FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         INTERMEDIATE_STATE_IDENTIFIER,                  INTERMEDIATE_STATE_IDENTIFIER,                  FINAL_STATE_IDENTIFIER,                               FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                                FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER, FINAL_STATE_IDENTIFIER, FINAL_STATE_IDENTIFIER, FINAL_STATE_IDENTIFIER},
            {FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            INTERMEDIATE_STATE_INTEGER,                     FINAL_STATE_INTEGER,                                  FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                                   FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER, FINAL_STATE_INTEGER, FINAL_STATE_INTEGER, FINAL_STATE_INTEGER},
            {},
            {},
            {FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,           FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,            FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO},
            {FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,                     FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN, FINAL_STATE_OPERATOR_GREATER_THAN, FINAL_STATE_OPERATOR_GREATER_THAN, FINAL_STATE_OPERATOR_GREATER_THAN},
            {FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,        FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,         FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO},
            {ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, INTERMEDIATE_STATE_OPERATOR_NOT_EQUAL_TO,             ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT,        ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT},
            {},
            {},
            {FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                           FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                            FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON, FINAL_STATE_OPERATOR_COLON, FINAL_STATE_OPERATOR_COLON, FINAL_STATE_OPERATOR_COLON},
            {},
            {},
            {},
            {},
            {},
            {FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                          FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                           FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO,                    FINAL_STATE_OPERATOR_MODULO, FINAL_STATE_OPERATOR_MODULO, FINAL_STATE_OPERATOR_MODULO, FINAL_STATE_OPERATOR_MODULO},
            {},
            {},
            {},
            {},
            {},
            {FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,            FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,             FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET, FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET, FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET, FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET},
            {},
            {},
            {}
    };

    const std::map<int, TOKEN_IDENTIFIER> STATE_TO_TOKEN_IDENTIFIER_MAP = {
            {FINAL_STATE_END_OF_FILE,                               END_OF_FILE},
            {FINAL_STATE_IDENTIFIER,                                IDENTIFIER},
            {FINAL_STATE_INTEGER,                                   INTEGER},
            {FINAL_STATE_OPERATOR_ASSIGN,                           OPERATOR_ASSIGNM},
            {FINAL_STATE_OPERATOR_LESS_THAN,                        OPERATOR_LESS_THAN},
            {FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,            OPERATOR_LESS_THAN_OR_EQUAL_TO},
            {FINAL_STATE_OPERATOR_GREATER_THAN,                     OPERATOR_GREATER_THAN},
            {FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,         OPERATOR_GREATER_THAN_OR_EQUAL_TO},
            {FINAL_STATE_OPERATOR_NOT_EQUAL_TO,                     OPERATOR_NOT_EQUAL_TO},
            {FINAL_STATE_OPERATOR_EQUAL_TO,                         OPERATOR_EQUAL_TO},
            {FINAL_STATE_OPERATOR_COLON,                            OPERATOR_COLON},
            {FINAL_STATE_OPERATOR_ADDITION,                         OPERATOR_ADDITION},
            {FINAL_STATE_OPERATOR_SUBTRACTION,                      OPERATOR_SUBTRACTION},
            {FINAL_STATE_OPERATOR_MULTIPLICATION,                   OPERATOR_MULTIPLICATION},
            {FINAL_STATE_OPERATOR_DIVISION,                         OPERATOR_DIVISION},
            {FINAL_STATE_OPERATOR_AND,                              OPERATOR_AND},
            {FINAL_STATE_OPERATOR_MODULO,                           OPERATOR_MODULO},
            {FINAL_STATE_OPERATOR_CONCATENATION,                    OPERATOR_CONCATENATION},
            {FINAL_STATE_DELIMITER_LEFT_PARENTHESIS,                DELIMITER_LEFT_PARENTHESIS},
            {FINAL_STATE_DELIMITER_RIGHT_PARENTHESIS,               DELIMITER_RIGHT_PARENTHESIS},
            {FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,                DELIMITER_LEFT_CURLY_BRACE},
            {FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,               DELIMITER_RIGHT_CURLY_BRACE},
            {FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,             DELIMITER_LEFT_SQUARE_BRACKET},
            {FINAL_STATE_DELIMITER_RIGHT_SQUARE_BRACKET,            DELIMITER_RIGHT_SQUARE_BRACKET},
            {FINAL_STATE_DELIMITER_COMMA,                           DELIMITER_COMMA},
            {FINAL_STATE_DELIMITER_SEMICOLON,                       DELIMITER_SEMICOLON},
            {INTERMEDIATE_STATE_INITIAL,                            END_OF_FILE},
            {INTERMEDIATE_STATE_IDENTIFIER,                         IDENTIFIER},
            {INTERMEDIATE_STATE_INTEGER,                            INTEGER},
            {INTERMEDIATE_STATE_OPERATOR_ASSIGN,                    OPERATOR_ASSIGNM},
            {INTERMEDIATE_STATE_OPERATOR_LESS_THAN,                 OPERATOR_LESS_THAN},
            {INTERMEDIATE_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     OPERATOR_LESS_THAN_OR_EQUAL_TO},
            {INTERMEDIATE_STATE_OPERATOR_GREATER_THAN,              OPERATOR_GREATER_THAN},
            {INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  OPERATOR_GREATER_THAN_OR_EQUAL_TO},
            {INTERMEDIATE_STATE_ILLEGAL_OPERATOR_EXCLAMATION_POINT, END_OF_FILE}, //TODO
            {INTERMEDIATE_STATE_OPERATOR_NOT_EQUAL_TO,              OPERATOR_NOT_EQUAL_TO},
            {INTERMEDIATE_STATE_OPERATOR_EQUAL_TO,                  OPERATOR_EQUAL_TO},
            {INTERMEDIATE_STATE_OPERATOR_COLON,                     OPERATOR_COLON},
            {INTERMEDIATE_STATE_OPERATOR_ADDITION,                  OPERATOR_ADDITION},
            {INTERMEDIATE_STATE_OPERATOR_SUBTRACTION,               OPERATOR_SUBTRACTION},
            {INTERMEDIATE_STATE_OPERATOR_MULTIPLICATION,            OPERATOR_MULTIPLICATION},
            {INTERMEDIATE_STATE_OPERATOR_DIVISION,                  OPERATOR_DIVISION},
            {INTERMEDIATE_STATE_OPERATOR_AND,                       OPERATOR_AND},
            {INTERMEDIATE_STATE_OPERATOR_MODULO,                    OPERATOR_MODULO},
            {INTERMEDIATE_STATE_OPERATOR_CONCATENATION,             OPERATOR_CONCATENATION},
            {INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS,         DELIMITER_LEFT_PARENTHESIS},
            {INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS,        DELIMITER_RIGHT_PARENTHESIS},
            {INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE,         DELIMITER_LEFT_CURLY_BRACE},
            {INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE,        DELIMITER_RIGHT_CURLY_BRACE},
            {INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      DELIMITER_LEFT_SQUARE_BRACKET},
            {INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET,     DELIMITER_RIGHT_SQUARE_BRACKET},
            {INTERMEDIATE_STATE_DELIMITER_COMMA,                    DELIMITER_COMMA},
            {INTERMEDIATE_STATE_DELIMITER_SEMICOLON,                DELIMITER_SEMICOLON},
            {ERROR_STATE_ILLEGAL_ISOLATED_EXCLAMATION_POINT,        END_OF_FILE} //TODO
    };

    const std::map<std::string, TOKEN_IDENTIFIER> STRING_TO_KEYWORD_TOKEN_IDENTIFIER_MAP = {
            {"Begin",   KEYWORD_BEGIN},
            {"End",     KEYWORD_END},
            {"Check",   KEYWORD_CHECK},
            {"Loop",    KEYWORD_LOOP},
            {"Void",    KEYWORD_VOID},
            {"Var",     KEYWORD_VAR},
            {"Return",  KEYWORD_RETURN},
            {"Input",   KEYWORD_INPUT},
            {"Output",  KEYWORD_OUTPUT},
            {"Program", KEYWORD_PROGRAM},
    };

public:
    Scanner();

    Token *getToken(const std::string &rawData, int currentIndex);
};

#endif //P1_SCANNER_H
